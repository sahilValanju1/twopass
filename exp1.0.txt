Algorithm for pass 1:
Step 1: Start
Step 2: Initialize location counter to zero.
Step 3: Read opcode field of next instruction.
Step 4: Search opcode in pseudo opcode table.
Step 5: If opcode is found in Pseudo Opcode Table
Step 5.1: If it is ‘DS’ or ‘DC’
Adjust location counter to proper alignment.
Assign length of data field to ‘L’
Go to step 9
Step 5.2: If it is ‘EQU’
Evaluate operand field
Assign value to symbol in label field
Go to step 3
Step 5.3: If it is ‘USING’ or ‘DROP’ Go to step 3
Step 5.4: If it is ‘END’
Assign storage locations to literals
Go to step 12
Step 6: Search opcode in Machine Opcode Table.
Step 7: Assign it’s length to ‘L’.
Step 8: Process any literals and enter them into Literal Table.
Step 9: If symbol is there in label field assign current value of Location Counter to symbol.
Step 10: Location Counter = Location Counter + L.
Step 11: Go to step 3
Step 12: Stop.
Algorithm for Pass 2:
Step 1: Start
Step 2: Initialize location counter to zero.
Step 3: Read opcode field of next instruction.
Step 4: Search opcode in pseudo opcode table.
Step 5: If opcode is found in Pseudo Opcode Table
Step 5.1: If it is ‘DS’ or ‘DC’
Adjust location counter to proper alignment.
If it is ‘DC’ opcode form constant and insert in assembled program
Assign length of data field to ‘L’
Go to step 6.4
Step 5.2: If it is ‘EQU’ or ‘START’ ignore it.Go to step 3
Step 5.3: If it is ‘USING’
Evaluate operand and enter base reg no. and value into base table
Go to step 3
Step 5.3: If it is ‘DROP’
Indicate base reg no. available in base table Go to step 3
Step 5.4: If it is ‘END’
Generate literals for entries in Literal table
Go to step 12
Step 6: Search opcode in Machine Opcode Table.

Step 7: Get opcode byte and format code.
Step 8: Assign it’s length to ‘L’.
Step 9: Check type of instruction.
Step 10: If it is of ‘RR’ type
Step 10.1: Evaluate both register expressions and insert into second byte.
Step 10.2: Assemble instruction.
Step 10.3: Location Counter = Location Counter + L.
Step 10.4: Go to step 3
Step 11: If it is of ‘RX’ type
Step 11.1: Evaluate register and index expressions and insert into second byte.
Step 11.2: Calculate effective address of operand.
Step 11.3: Determine appropriate displacement and base register
Step 11.2: Put base and displacement into bytes 3 and 4
Step 11.3: Location Counter = Location Counter + L.
Step 11.4: Go to step 10.2
Step 12: Stop.
